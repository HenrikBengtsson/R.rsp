\documentclass[letter,12pt]{article}
\usepackage{graphicx} 
\graphicspath{{figures/}}

<%
setMethodS3("sendToPng", "default", function(..., width=840) {
 devEval(type="png", width=width, ..., force=TRUE)$fullname;
})
%>

\newcommand{\code}[1]{\texttt{#1}}


\title{Dynamic LaTeX reports with RSP}
\author{Henrik Bengtsson}

\begin{document}

\maketitle
\begin{abstract}
An important part of a statistical analysis is to document the results.  A common approach is to build up an R script as the the analysis progresses.  This script may generate image files and tables that are later inserted manually into a, say, LaTeX report.  This strategy works alright for small one-off analyzes, whereas for larger and partly repetitive analyzes an automatic report generator is more suitable.

In this article, we will illustrate how a LaTeX document can be extended with the RSP markup language resulting in a very powerful tool for generating dynamic reports in R.  
As we will discover, with RSP it is possible to generate document constructs that are not possible in Sweave, e.g. looping of a mix of R and LaTeX blocks.
The strategy of using RSP is not limited to LaTeX, but can easily be used in combination of other text-based documentation language such as HTML, and plain text.
This article was itself written using LaTeX and RSP.
\end{abstract}


\section{Compiling LaTeX documents with RSP markups}
In order to compile an LaTeX+RSP document named \code{report.tex.rsp} into a PDF, use the \code{rsptex()} function as follows:
\begin{verbatim}
library("R.rsp")
rsptex("report.tex.rsp")
\end{verbatim}

This will (i) translate the LaTeX RSP document into a valid R script (\code{report.tex.rsp.R}), (ii) run the R script resulting in a LaTeX document (\code{report.tex}), and (iii) compile the LaTeX document into a PDF (\code{report.pdf}).

You can try to compile this document by calling
\begin{verbatim}
library("R.rsp")
path <- system.file("tex.rsp", package="R.rsp")
rsptex("report.tex.rsp", path=path)
\end{verbatim}
The PDF (\code{report.pdf}) will be available in the current directory of R (see \code{getwd()}).


\section{The RSP markup language}

\subsection{Evaluating R code}
The RSP markup \code{<\%\{R code\}\%>} evaluates the R code (without inserting it into the document)..  For instance,
\begin{verbatim}
<\%:
a <- 1
b <- 2
%>
\end{verbatim}
evaluates the code such that \code{a == 1} and \code{b == 2} afterward.


\subsection{Evaluating and displaying code blocks}
Just as \code{<\%\{R code\}\%>}, the RSP markup \code{<\%:\{R code\}\%>} also evaluates core, but in addition it also inserts the code verbatim into the document.  For instance,
\begin{verbatim}
<\%:
a <- 1
b <- 2
%>
\end{verbatim}
evaulates the code and inserts
\begin{verbatim}
<%:
a <- 1
b <- 2
%>
\end{verbatim}
into the document.  Formatting of the inserted code has to be taken care of by LaTeX.  For instance, here we wrapped the RSP markup inside a \code{{\textbackslash}begin\{verbatim\} ... {\textbackslash}end\{verbatim\}} block.


\section{Generating and inserting figures}

\begin{figure}[htp]
 \begin{center}
 \resizebox{0.70\textwidth}{!}{%
  \includegraphics{<%=sendToPng(name="MyFigure", tags="yeah,cool",
width=840, aspectRatio=0.75, {
   plot(1:10);
   abline(a=0, b=1);
  })%>}
 }%
 \end{center}
 \caption{This figures was generated by an RSP code snippet and transparently inserted into the LaTeX document.}
 \label{fig:MyFigure}
\end{figure}

\end{document}

