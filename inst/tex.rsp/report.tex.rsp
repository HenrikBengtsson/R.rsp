\documentclass[letter,12pt]{article}
\usepackage{graphicx} 
\usepackage{xspace} 
\graphicspath{{figures/}}


\newcommand{\keywords}[1]{\footnotesize{\textbf{Keywords: }#1}\xspace}
\newcommand{\pkg}[1]{\textsl{#1}\xspace}
\newcommand{\code}[1]{\texttt{#1}\xspace}


\title{Dynamic LaTeX reports with RSP}
\author{Henrik Bengtsson}

\begin{document}

\maketitle
\begin{abstract}
An important part of a statistical analysis is to document the results.  A common approach is to build up an R script as the the analysis progresses.  This script may generate image files and tables that are later inserted manually into a, say, LaTeX report.  This strategy works alright for small one-off analyzes, whereas for larger and partly repetitive analyzes an automatic report generator is more suitable.

In this article, we will illustrate how a LaTeX document can be extended with the RSP markup language resulting in a very powerful tool for generating dynamic reports in R.  
As we will discover, with RSP it is possible to generate document constructs that are not possible in Sweave, e.g. looping of a mix of R and LaTeX blocks.
The strategy of using RSP is not limited to LaTeX, but can easily be used in combination of other text-based documentation language such as HTML, and plain text.
This article was itself written using LaTeX and RSP.
\end{abstract}

\keywords{reproducible research, report generator, markup language, LaTeX}



<%-------------------------------------------------------------------
  INTRODUCTION
  -------------------------------------------------------------------%>
\section{Compiling LaTeX documents with RSP markup}
Before anything else, load the \pkg{R.rsp} package by \code{library("R.rsp")}.  Then, in order to compile an LaTeX document with RSP markup (a "LaTeX RSP document") named \code{report.tex.rsp} into a PDF, do:
\begin{verbatim}
rsptex("report.tex.rsp")
\end{verbatim}
This will (i) translate the LaTeX RSP document into a valid R script (\code{report.tex.rsp.R}), (ii) run the R script resulting in a LaTeX document (\code{report.tex}), and (iii) compile the LaTeX document into a PDF (\code{report.pdf}).

\textsc{Example:} You can try to compile this document by calling
\begin{verbatim}
library("R.rsp")
path <- system.file("tex.rsp", package="R.rsp")
rsptex("report.tex.rsp", path=path)
\end{verbatim}
The PDF (\code{report.pdf}) will be available in the current directory of R (see \code{getwd()}).



<%-------------------------------------------------------------------
  THE RSP MARKUP LANGUAGE
  -------------------------------------------------------------------%>
\section{The RSP markup language}

\subsection{\code{<\%\{R code\}\%>} - Evaluating R code}
The RSP markup \code{<\%\{R code\}\%>} evaluates the R code (without inserting it into the document).  For instance,
\begin{verbatim}
<\%
n <- 3
type <- "horse"
%>
\end{verbatim}
evaluates the code such that \code{n == 3} and \code{type == "horse"} afterward.


\subsection{\code{<\%:\{R code\}\%>} - Evaluating and embedding code}
Just as \code{<\%\{R code\}\%>}, the RSP markup \code{<\%:\{R code\}\%>} also evaluates R code, but in addition it also inserts the code verbatim into the document.  For instance,
\begin{verbatim}
<\%:
n <- 3
type <- "horse"
%>
\end{verbatim}
evaulates the code and insert the following into the LaTeX document:
\begin{verbatim}
<%:
n <- 3
type <- "horse"
%>
\end{verbatim}
Formatting of the inserted code has to be taken care of by LaTeX.  For instance, here we have explicitly wrapped the RSP markup inside a \code{{\textbackslash}begin\{verbatim\}...{\textbackslash}end\{verbatim\}} block.


\subsection{\code{<\%=\{R code\}\%>} - Inlining values of R variables}
The RSP markup \code{<\%=\{R code\}\%>} evaluates the R code (without inserting it into the document) and inserts the character representation\footnote{The \emph{character representation} of an R object \code{x} is what \code{as.character(x)} gives.} of the returned R object.  For instance,
\begin{verbatim}
There are <\%=n%> red <\%=type%>s
\end{verbatim}
would produce the string "There are <%=n%> red <%=type%>s".



\subsection{\code{<\%--\{any thing\}--\%>} - Comments}
The RSP markup \code{<\%--\{any thing\}--\%>} will be treated as a comment, which will not be translated, i.e. it will immediately be dropped.  RSP comments are useful for excluding large sections of an RSP document.  It is also for adding comments that are independent of the syntax (here LaTeX) of the document itself.


<%-------------------------------------------------------------------
  FIGURES
  -------------------------------------------------------------------%>
\section{Generating and inserting figures}
Since the above RSP markups are powerful enough, there is no need for a specific markup for figures.  This section shows how to create and embed image files into a LaTeX document.

\subsection{Brief on including image files in LaTeX}
When insert a figure in LaTeX, it is recommended to do so without specifying neither the path nor the filename extension of the image file, e.g. \code{{\textbackslash}includegraphics\{MyFigure\}}.
In order for this to work, one must specify the "image search path", e.g.
\begin{verbatim}
\graphicspath{{figures/}{figures/external/}}
\end{verbatim}
which is preferably added to the beginning of the LaTeX file.  This tells LaTeX to search for image files in directory figures/ as well as directory figures/external/.   Moreover, when leaving out the filename extension, LaTeX will automatically search for image files with different filename extensions, e.g. \code{*.png}, \code{*.eps}, and \code{*.pdf}.


\subsection{Defining a function that creates an image file}
The \code{devEval()} function of the \pkg{R.utils} package is useful for creating an image file from a set of plot commands.  For instance, \code{devEval("png", name="myFigure", width=840, aspectRatio=0.6, \{ curve(dnorm, from=-5, to=+5) \})} will create a PNG file named \code{myFigure.png} displaying the Guassian density distribution and that is 840 pixels wide and 0.6*840=504 pixels high.  Moreover, (by default) \code{devEval()} writes the image file to the figures/ directory.  For more information, see \code{help("devEval")}.

To spare ourselves from having to repeat the same arguments each time an image is created, we define the following custom function for creating PNG image files with a certain default dimension (840 by 840 since the default aspect ratio is 1) and default graphical parameters (see \code{help("par")}):
\begin{verbatim}
<%:
asPNG <- function(..., width=840, par=list()) {
 # Default graphical parameters
 parT <- list(cex=2, lwd=2);

 # Override default values by user specified settings
 for (key in names(par)) {
   parT[[key]] <- par[[key]];
 }

 # Create a PNG file and return its fullname
 devEval(type="png", width=width, ..., par=parT, force=TRUE)$fullname;
}
%>
\end{verbatim}
This function creates a PNG file based on a set of plot commands and returns the so called \emph{fullname} of the image file.  The fullname of an image file is the filename without the filename extension.
%%  For instance, if the image file is \code{"MyFigure,yeah,cool.png"}, then the fullname is \code{"MyFigure,yeah,cool"}.  

\textsc{Example:}  The following R code creates a PNG image file 'figures/MyFigure,yeah,cool.png' and returns \code{"MyFigure,yeah,cool"}:
\begin{verbatim}
asPNG("MyFigure,yeah,cool", {
  curve(dnorm, from=-5, to=+5);
})
\end{verbatim}


\subsection{Embedding a R figure}
\begin{figure}[htp]
 \begin{center}
 \resizebox{0.70\textwidth}{!}{%
  \includegraphics{<%=asPNG("MyFigure,yeah,cool", width=840, {
   curve(dnorm, from=-5, to=+5);
  })%>}
 }%
 \end{center}
 \caption{This figure was generated and inserted into the LaTeX document by RSP-embedded markup.}
 \label{fig:MyFigure}
\end{figure}

With this setup, it is possible to create and embed a figure with the following tidy markup:
\begin{verbatim}
\includegraphics{<\%=asPNG(name="MyFigure,yeah,cool", width=840, {
  curve(dnorm, from=-5, to=+5);
})%>}
\end{verbatim}
After the RSP code has been processed, and the image file has been created, the above simply produces the following markup in the generated LaTeX document:
\begin{verbatim}
\includegraphics{MyFigure,yeah,cool}
\end{verbatim}



<%-------------------------------------------------------------------
  ADDITIONAL FEATURES
  -------------------------------------------------------------------%>
\section{Iterating over a mixture of R and LaTeX blocks}
A useful feature of RSP is that it is possible to construct R expressions that span multiple R and LaTeX blocks.  For instance, the following will iterate over multiple R and LaTeX blocks:
\begin{verbatim}
The <\%=n <- length(letters)%> letters in the English alphabet are: 
<\% for (i in 1:10) { %>
  <\%=letters[i]%>/<\%=LETTERS[i]%><\%=if(i < n) ", "%>%
<\% } %>.
\end{verbatim}
which generates: 'The <%=n <- length(letters)%> letters in the English alphabet are: 
<% for (i in 1:n) { %>
  <%=letters[i]%>/<%=LETTERS[i]%><%=if(i < n) ", "%>
<% } %>.'

A more complex example is where one wish to generate a report on human genomic data across all of the 24 chromosomes and where the same type of analysis should be repeated for each chromosome.  With RSP markup, this can be achieved by an outer loop over chromosomes:
\begin{verbatim}
<\% for (chromosome in 1:24) { %>
\section{Chromosome <\%=chromosome%>}
...
A mix of RSP and LaTeX blocks constituting 
the analysis of the current chromosome.
...
<\% } # for (chromosome ...) %>
\end{verbatim}

Note that there exist no corresponding markup in Sweave.  Instead, contrary to RSP, Sweave requires the each code chunk contains a complete R expression.  This means that, in terms of the above example, in Sweave it is not possible to begin a for loop in one code chunk and end it in a succeeding one.  This has to do with the fundamentally different way RSP and Sweave documents are processed.


\end{document}
